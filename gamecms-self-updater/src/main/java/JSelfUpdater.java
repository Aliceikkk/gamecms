import DTO.SettingsDTO;
import com.google.gson.Gson;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;

import static javax.swing.JOptionPane.showMessageDialog;

public class JSelfUpdater extends JFrame {
    private static final String updEXE = "UPD.exe";
    public SettingsDTO settingsDTO;
    private static JSelfUpdater instance;
    public JPanel panelConteudo;
    public JLabel label;
    public JProgressBar progressBar1;

    public static JSelfUpdater getInstance() {
        if (instance == null) {
            instance = new JSelfUpdater();
        }
        return instance;
    }

    private void centralizaTela() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int screenWidth = screenSize.width;
        int screenHeight = screenSize.height;
        int frameWidth = getWidth();
        int frameHeight = getHeight();
        int x = (screenWidth - frameWidth) / 2;
        int y = (screenHeight - frameHeight) / 2;
        setLocation(x, y);
    }

    private void configuraTamanhoEFechar() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setUndecorated(true);
        setSize(60, 80);
    }

    private void fechar() {
        setVisible(false);
        dispose();
    }

    private void initComponents() {
        configuraTamanhoEFechar();
        centralizaTela();
        getInstance().setContentPane(panelConteudo);
        ImageIcon iconLogo = new ImageIcon(this.getClass().getClassLoader().getResource("logo.png"));
        getInstance().label.setIcon(iconLogo);
        getInstance().label.setText("");
        getInstance().setVisible(true);
        loadSettings();
    }

    public static void main(String[] args) {
        JSelfUpdater instance = getInstance();
        instance.initComponents();
        instance.updateIfVersionNotMatch();
    }


    private void updateIfVersionNotMatch() {
        LogUtils.write(LogUtils.LogType.WARNING, "Self Updater - Iniciando verificação de update");
        if (!UpdaterUtils.versionMatches()) {
            LogUtils.write(LogUtils.LogType.WARNING, "Self Updater - Versão não bate Iniciando Update");
            progressBar1.setValue(75);
            UpdaterUtils.updateAndReplaceUpdaterFile();
            progressBar1.setValue(100);
            LogUtils.write(LogUtils.LogType.SUCCESS, "Self Updater - Versão não bate Update Concluido");
        } else {
            LogUtils.write(LogUtils.LogType.WARNING, "Self Updater - Versão bate ignorando update");
        }
        startUpdater();
    }

    static String getRootFolder() {
        String thisClassPath = JSelfUpdater.class.getProtectionDomain().getCodeSource().getLocation().getPath();
        File thisJarFile = new File(thisClassPath);
        String jarDir = thisJarFile.getParentFile().getAbsolutePath().replaceAll("%20", " ");
        return jarDir;
    }

    private void loadSettings() {
        Gson gson = new Gson();
        String settingsFile = null;
        try {
            settingsFile = Files.readString(Path.of(getRootFolder() + "/GAMECMS.SETTINGS"));
            this.settingsDTO = gson.fromJson(settingsFile, SettingsDTO.class);
        } catch (IOException e) {
            showMessageDialog(null, "Self Updater - Não foi possível carregar as configurações. Detalhes: " + e.getMessage());
            settingsDTO = null;
        }

        this.settingsDTO = gson.fromJson(settingsFile, SettingsDTO.class);
    }

    private void startUpdater() {
        LogUtils.write(LogUtils.LogType.WARNING, "Self Updater - Iniciando Updater");
        try {
            Desktop desktop = Desktop.getDesktop();
            desktop.open(new File(getRootFolder() + "\\" + updEXE));
            fechar();
        } catch (Exception e) {
            LogUtils.write(LogUtils.LogType.ERROR, "Self Updater - Não foi possível conectar ao servidor de atualizacoes");
            fechar();
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelConteudo = new JPanel();
        panelConteudo.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        label = new JLabel();
        label.setText("imagem");
        label.setVerticalAlignment(0);
        panelConteudo.add(label, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(60, 60), new Dimension(60, 60), new Dimension(60, 60), 0, false));
        progressBar1 = new JProgressBar();
        progressBar1.setBorderPainted(true);
        progressBar1.setForeground(new Color(-1769465));
        progressBar1.setString("");
        progressBar1.setStringPainted(true);
        panelConteudo.add(progressBar1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(60, 20), new Dimension(60, 20), new Dimension(60, 20), 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelConteudo;
    }

}
